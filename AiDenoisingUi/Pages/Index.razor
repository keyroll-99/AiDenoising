@page "/"
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@using AiDenoisingUi.Data
@inject DenoisingService DenoisingService

<div class="container">
    <div class="canvas" @onclick="PointerDown">
        <BECanvas Width="500" Height="500" @ref="_drawCanvas"></BECanvas>
    </div>
    <div class="line"></div>
    <div class="canvas">
        <BECanvas Width="500" Height="500" @ref="_resultCanvas"></BECanvas>
    </div>
</div>

<button @onclick="Denoise">Denoise</button>
<button @onclick="Learn">Learn</button>
<input @bind="_brushSize"  type="number" />
recursion: <input type="checkbox" @bind="_recursion"/>

<InputSelect @bind-Value="_currentImage">
  
    @foreach (var imageType in Enum.GetValues(typeof(ImageType)))
    {
    
        <option value="@imageType">@imageType</option>
    }
</InputSelect>
<button @onclick="ChangeImage">load image</button>
@if (_isLearn)
{
    <p>Learning...</p>
}

@if (_showLoader)
{
    <p>Loading...</p>
}

@code{
    private const int BoxSize = 10;
    private const int Width = 50;
    private const int Height = 50;

    private bool _isLearn = false;
    private bool _showLoader = false;
    private bool _blockDrawing = false;
    private bool _recursion;
    private int _brushSize = 1;

    private bool _renderImage = true;
    private ImageType _currentImage = ImageType.SmileFace;

    private List<int> _drawImage = new();
    private List<int> _originalImage = new();

    private Canvas2DContext _drawCanvasContext;
    private Canvas2DContext _resultCanvasContext;

    private BECanvasComponent _drawCanvas;
    private BECanvasComponent _resultCanvas;


    protected override async Task OnInitializedAsync()
    {
        _drawImage = await DenoisingService.LoadImage(_currentImage) as List<int>;
        _originalImage = await DenoisingService.LoadImage(_currentImage) as List<int>;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _drawCanvasContext = await _drawCanvas.CreateCanvas2DAsync();
        _resultCanvasContext = await _resultCanvas.CreateCanvas2DAsync();

        if (_renderImage)
        {
            _blockDrawing = true;
            _showLoader = true;
            for (var y = 0; y < Height; y++)
            {
                for (var x = 0; x < Width; x++)
                {

                    if (_drawImage[(y * Width) + x] == 1)
                    {
                        await _drawCanvasContext.SetFillStyleAsync("black");
                    }
                    else
                    {
                        await _drawCanvasContext.SetFillStyleAsync("white");
                    }
                    if (_originalImage[(y * Width) + x] == 1)
                    {
                        await _resultCanvasContext.SetFillStyleAsync("black");
                    }
                    else
                    {
                        await _resultCanvasContext.SetFillStyleAsync("white");
                    }
                    await _drawCanvasContext.FillRectAsync(x * 10, y * 10, BoxSize, BoxSize);
                    await _resultCanvasContext.FillRectAsync(x * 10, y * 10, BoxSize, BoxSize);


                }
            }
            _blockDrawing = false;
            _showLoader = false;
            _renderImage = false;
        }
    }

    async Task PointerDown(MouseEventArgs e)
    {
        try
        {
            if (_blockDrawing)
            {
                return;
            }
            var x = Math.Floor(e.OffsetX / 10) - (_brushSize / 2);
            var y = Math.Floor(e.OffsetY / 10) - (_brushSize / 2);
            await _drawCanvasContext.SetFillStyleAsync("white");


            for (var yy = y; (yy < y + _brushSize) && yy < Height; yy++)
            {
                if(yy < 0)
                {
                    continue;
                }
                for (var xx = x; xx < x + _brushSize && xx < Width; xx++)
                {
                    if(xx < 0)
                    {
                        continue;
                    }
                    _drawImage[(int)((yy * Width) + xx)] = 0;
                    await _drawCanvasContext.FillRectAsync(xx * 10, yy * 10, BoxSize, BoxSize);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        } 
    }

    async Task ChangeImage()
    {
        _drawImage = await DenoisingService.LoadImage(_currentImage) as List<int>;
        _originalImage = await DenoisingService.LoadImage(_currentImage) as List<int>;
        await _drawCanvasContext.SetFillStyleAsync("white");

        await _drawCanvasContext.FillAsync();
        await _resultCanvasContext.FillAsync();
        _renderImage = true;
    }

    async Task Denoise()
    {
        if (_blockDrawing)
        {
            return;
        }
        _blockDrawing = true;
        _showLoader = true;
        var isEqualOriginal = false;
        do
        {
            var  result = await DenoisingService.Denoise(_currentImage, _drawImage) as List<int>;

            for (var y = 0; y < Height; y++)
            {
                for (var x = 0; x < Width; x++)
                {
                    var value = result[(y * Width) + x];
                    _drawImage[(y * Width) + x] = value;
                }
            }

            for (var y = 0; y < Height; y++)
            {
                for (var x = 0; x < Width; x++)
                {

                    if (_drawImage[(y * Width) + x] == 1)
                    {
                        await _drawCanvasContext.SetFillStyleAsync("black");
                    }
                    else
                    {
                        await _drawCanvasContext.SetFillStyleAsync("white");
                    }
                    await _drawCanvasContext.FillRectAsync(x * 10, y * 10, BoxSize, BoxSize);
                }
            }
            isEqualOriginal = _drawImage.SequenceEqual(_originalImage);
        } while (_recursion && !isEqualOriginal);
        _blockDrawing = false;
        _showLoader = false;

    }

    async Task Learn()
    {
        _isLearn = true;
        await DenoisingService.Learn(_currentImage);
        _isLearn = false;
    }

}